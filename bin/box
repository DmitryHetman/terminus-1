#!/usr/bin/env python

from terminus_lib import *
import optparse
import pexpect
import signal
import sys
import termios
import os
import threading
import tty
import thread
import subprocess
import time
import traceback

def setecho(state):
    # Extracted this from pexpect
    attr = termios.tcgetattr(sys.stdout)
    if state:
        attr[3] = attr[3] | termios.ECHO
    else:
        attr[3] = attr[3] & ~termios.ECHO
    termios.tcsetattr(sys.stdout, termios.TCSANOW, attr)


def filter(text):
    for a, b in [('\x01', '\x01\x01'),
                 ('\a',   '\x01\a'),
                 ('\x1B', '\x01\x1B')]:
        text = text.replace(a, b)
    return text


class Proc:

    def __init__(self, command, nrows, ncols, wait, nest):
        self.command = command
        self.nrows = nrows
        self.ncols = ncols
        self.wait = wait
        self.nest = nest

    def run(self):

        def sig_winch(signum, frame):
            pass
            # print('winch!')

        def sig_back(signum, frame):
            # print('back!')
            self.enter()

        def sig_kill(signum, frame):
            # print('killed!')
            self.exit()

        def sig_stop(signum, frame):
            # print('stopped!')
            # self.exit()
            self.exit_soft()
            os.kill(os.getpid(), signal.SIGSTOP)
            # pass

        signal.signal(signal.SIGWINCH, sig_winch)
        signal.signal(signal.SIGTERM, sig_kill)
        signal.signal(signal.SIGTSTP, sig_stop)
        signal.signal(signal.SIGINT, sig_kill)
        signal.signal(signal.SIGCONT, sig_back)

        # self.enter()

        self.enter()
        try:
            self.proc = pexpect.spawn(self.command, init_r = rows, init_c = columns)
            self.thread = threading.Thread(target = self.read_stdin) #self.process)
            self.thread.daemon = not self.wait
            self.thread.start()
            self.process()
        except Exception as e:
            traceback.print_exc()
            self.exit()

    def process(self):
        printers.t.new(self.nrows, self.ncols, end = 7, nest = (self.nest, ))
        while True:
            try:
                x = self.proc.read_nonblocking(100, timeout = 1)
                printers.t(str(filter(x)), end = 7, nest = (self.nest, ))
            except pexpect.TIMEOUT:
                continue
            except pexpect.EOF:
                self.proc.close()
                self.exit()
                return

    def enter(self):
        sys.stdout.write('\x1B[?204;{n}y'.format(n = ";".join(map(str, [self.nest]))));
        self.fd = sys.stdin.fileno()
        self.old_settings = termios.tcgetattr(self.fd)
        tty.setraw(sys.stdin.fileno())

    def exit_soft(self):
        termios.tcsetattr(self.fd, termios.TCSADRAIN, self.old_settings)

    def set_size(self, w, h):
        self.proc.setwinsize(h, w)

    def send(self, new):
        self.proc.send(new)

    def exit(self):
        self.exit_soft()
        sys.exit(0)

    def read_stdin(self):
        try:
            while True:
                ch = sys.stdin.read(1)
                if (ch == '\x1A'):
                    os.kill(os.getpid(), signal.SIGTSTP)
                self.send(ch)
        finally:
            self.exit()



if __name__ == '__main__':

    parser = optparse.OptionParser(usage = "Usage: %prog [options] <command>",
                                   description = "Box a command in its own mini-terminal.")
    parser.set_conflict_handler('resolve')

    parser.add_option("-r", "--rows", dest="rows", default="10",
                      help=("Number of rows of the sub-terminal to create."
                            " By default, the sub-terminal will hold 10 lines."))

    parser.add_option("-c", "--cols", dest="cols", default="",
                      help=("Number of columns of the sub-terminal to create."
                            " By default, this will be two less columns as the"
                            " enclosing terminal."))

    parser.add_option("-n", "--nest", dest="nest", default="",
                      help=("Nest to put the sub-terminal in. "
                            "It may be a list of comma-separated numbers. "
                            "(default: '')"))

    parser.add_option("-w", "--wait", dest="wait", action="store_true", default=False,
                      help=("True if the process should wait"
                            " for a keystroke before ending."
                            " Does not work if piping to box"))

    (options, args) = parser.parse_args()

    if not options.nest:
        nest = time.time() / 10000000.0
        nest = int((nest - int(nest)) * 10000000000) + 1000
    else:
        nest = int(options.nest)

    try:
        prows, pcolumns = map(int, subprocess.Popen(
                ['stty', 'size'],
                stderr = subprocess.PIPE,
                stdout = subprocess.PIPE).stdout.read().split())
    except ValueError:
        prows = 10
        pcolumns = 80
    rows = int(options.rows)
    columns = int(options.cols or (pcolumns - 2))

    if not args:
        printers.t.new(rows, columns, end = 7)
        while True:
            text = sys.stdin.readline()
            if not text:
                break
            printers.t(filter(text), end = 7)
        sys.exit(0)

    else:
        proc = Proc(" ".join(args), rows, columns, options.wait, nest)
        proc.run()
