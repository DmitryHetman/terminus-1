
## SCREEN SIZE

# Number of rows and columns.
# The value is auto-calculated if no/false/null
nlines: no
ncols: no

# Minimum number of lines and columns.
nlines_min: 1
ncols_min: 1

# If nlines/ncols are auto-calculated, they will be reduced by
# this number. You can use this e.g. to not overlap with the
# vertical scrollbar if there is one.
nlines_sub: 0
ncols_sub: 0


## BUFFERS

# The terminal normally comes with two buffers (two
# screens). Each has its own scrollback. The number of lines can
# be customized, and they will be grouped in blocks of size
# scroll_chunk.

screens:

  # 0
  # Main screen (default)
  - scrollback: 1000
    scroll_chunk: 100
    # You can customize colors for a particular screen by adding
    # something like this (this makes black red):
    # sgr:
    #   colors:
    #     0: red

  # 1
  # The alternate screen, used by most full-screen applications like
  # emacs, vi, screen, etc. has no scrollback.
  - scrollback: 0
    scroll_chunk: 100

  # You can add more screens if it suits your fancy, but right now
  # there is no way to access them.


## SCROLLING
  
scrolling:
  # If true, we use jscrollpane to display scrollbars. If
  # false, we use the standard OS-issue scrollbars.
  jscrollpane: true
  
  # true iff we want a horizontal scrollbar when appropriate
  # note: if jscrollpane is false, use css on .center (overflow-x = auto or hidden)
  scrollh: true
  
  # true iff we want a vertical scrollbar when appropriate
  # note: if jscrollpane is false, use css on .center (overflow-y = auto or hidden)
  # note: a false value is somewhat buggy with jscrollpane
  scrollv: true


# Codes used to style text in the terminal. The defaults can be
# overriden on a per-screen basis.
sgr:

  # Base style for all characters
  base_style: ""

  # Style for normal weight
  normal_style: ""

  # Style for bold or bright characters
  bold_style: "font-weight: bold;"

  # Styles to give spans that are given certain modes
  styles:
    3: "font-style: italic;"
    4: "text-decoration: underline;"
    9: "text-decoration: line-through;"
    23: "font-style: normal;"
    24: "text-decoration: none;"
    29: "text-decoration: none;"
    53: "text-decoration: overline;"
    55: "text-decoration: none;"

  # Terminal colors
  colors:

    # Normal intensity
    0: '#000'
    1: '#800'
    2: '#800'
    3: '#a80'
    4: '#008'
    5: '#808'
    6: '#088'
    7: '#aaa'

    # Bright (bold) intensity
    10: black
    11: red
    12: green
    13: yellow
    14: blue
    15: magenta
    16: cyan
    17: white



log:
  # Whether logging happens from the start
  start: on
  
  # Where to log
  #   off/no/false = no logging
  #   console = log to javascript console
  #   "#elem" = log to the element with that id
  where: "#log"

  # What to log
  #   off: log nothing
  #   all: log everything
  #   err: unexpected exceptions thrown during execution
  #   esc: log escape codes
  #   esc_unknown: log unknown escape codes
  #   scroll_clear: log when things scroll away
  #   create_nest: log nest creation
  #   destroy_nest: log nest destruction
  # Note: you can define a list of things to log.
  what:
    - error
    - esc_unknown

  # Prefix to all logged things (useful to determine source if there
  # are nested terminals).
  # Set to no/false/off if there is no prefix
  prefix: no

  # Grouping delay in milliseconds. If this time elapses with no
  # additional logging, the next entry in the log will cause the
  # current block to slide down and a new block to be created. In an
  # interactive setting, this typically creates a distinct log block
  # for each interaction that causes logging.
  group_delay: 100

  # If true there will be a nifty slidedown animation
  animate: yes

  # If true the divs will be colorized
  colorize: yes
