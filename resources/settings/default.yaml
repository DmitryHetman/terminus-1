
## SCREEN SIZE

# Number of rows and columns.
# The value is auto-calculated if no/false/null
nlines: no
ncols: no

# Minimum number of lines and columns.
nlines_min: 1
ncols_min: 1

# Maximum number of lines and columns.
nlines_max: 200
ncols_max: 1000

# If nlines/ncols are auto-calculated, they will be reduced by
# this number. You can use this e.g. to not overlap with the
# vertical scrollbar if there is one.
nlines_sub: 0
ncols_sub: 0


## BUFFERS

# The terminal normally comes with two buffers (two screens). Each has
# its own scrollback. The number of lines can be customized, and they
# will be grouped in blocks of size scroll_chunk. If cut_bottom is
# true for a given screen, blank lines at the bottom will not be
# displayed.

screens:

  # 0
  # Main screen (default)
  - scrollback: 1000
    scroll_chunk: 100
    cut_bottom: false
    # You can customize colors for a particular screen by adding
    # something like this (this makes black red):
    # sgr:
    #   colors:
    #     0: red

  # 1
  # The alternate screen, used by most full-screen applications like
  # emacs, vi, screen, etc. has no scrollback.
  - scrollback: 0
    scroll_chunk: 100
    cut_bottom: false

  # You can add more screens if it suits your fancy, but right now
  # there is no way to access them.


## SCROLLING
  
scrolling:
  # If true, we use jscrollpane to display scrollbars. If
  # false, we use the standard OS-issue scrollbars.
  jscrollpane: false
  
  # true iff we want a horizontal scrollbar when appropriate
  # note: if jscrollpane is false, use css on .center (overflow-x = auto or hidden)
  scrollh: true
  
  # true iff we want a vertical scrollbar when appropriate
  # note: if jscrollpane is false, use css on .center (overflow-y = auto or hidden)
  # note: a false value is somewhat buggy with jscrollpane
  scrollv: true


# Codes used to style text in the terminal. The defaults can be
# overriden on a per-screen basis.
sgr:

  # Base style for all characters
  base_style: ""

  # Style for normal weight
  normal_style: ""

  # Style for bold or bright characters
  bold_style: "font-weight: bold;"

  # Styles to give spans that are given certain modes
  styles:
    3: "font-style: italic;"
    4: "text-decoration: underline;"
    9: "text-decoration: line-through;"
    23: "font-style: normal;"
    24: "text-decoration: none;"
    29: "text-decoration: none;"
    53: "text-decoration: overline;"
    55: "text-decoration: none;"

  # Terminal colors
  colors:

    # Normal intensity
    0: '#000'
    1: '#800'
    2: '#800'
    3: '#a80'
    4: '#008'
    5: '#808'
    6: '#088'
    7: '#aaa'

    # Bright (bold) intensity
    10: black
    11: red
    12: green
    13: yellow
    14: blue
    15: magenta
    16: cyan
    17: white



log:
  # Whether logging happens from the start
  start: on
  
  # Where to log
  #   off/no/false = no logging
  #   console = log to javascript console
  #   "#elem" = log to the element with that id
  where: "#log"

  # What to log
  #   off: log nothing
  #   all: log everything
  #   err: unexpected exceptions thrown during execution
  #   esc: log escape codes
  #   esc_unknown: log unknown escape codes
  #   test: messages sent to logging during development, should be
  #         none in the production version
  #   info: informative stuff like logging: on/off
  # Note: you can define a list of things to log.
  what:
    # - esc
    - error
    - esc_unknown
    - test
    - info
    - nest
    # - exec

  # Prefix to all logged things (useful to determine source if there
  # are nested terminals).
  # Set to no/false/off if there is no prefix
  prefix: no

  # Grouping delay in milliseconds. If this time elapses with no
  # additional logging, the next entry in the log will cause the
  # current block to slide down and a new block to be created. In an
  # interactive setting, this typically creates a distinct log block
  # for each interaction that causes logging.
  group_delay: 100

  # If true there will be a nifty slidedown animation
  animate: yes

  # If true the divs will be colorized
  colorize: yes


# Key bindings
# Syntax:
# key: C- for Ctrl, A- for Alt, S- for Shift, in that order, lowercase for letter
# value:
#   ~command: execute the command
#   ~~X: with a capital letter X, print the character code charcode(X)-64
#   word: print the word
# You can give more than one command to execute with a given key
# binding, just make a list separated by spaces (see the Alt-<X> section)

bindings:

  # switch logging on or off
  C-S-p: ~log_mode
  C-S-c: ~clear_log

  # clear scrollback
  C-S-l: ~clear_scrollback

  # navigation
  C-Left: ~word_left
  C-Right: ~word_right
  A-Left: ~word_left
  A-Right: ~word_right
  Home: ~home
  End: ~end

  # deletion
  C-Backspace: ~word_delete_left
  C-Delete: ~word_delete_right

  # scrolling
  S-Up: ~scroll_up_line
  S-Down: ~scroll_down_line
  S-PgUp: ~scroll_up_page
  S-PgDn: ~scroll_down_page

  # DEFAULTS
  Backspace: ~backspace
  Tab: ~tab
  Esc: ~esc
  PgUp: ~pgup
  PgDn: ~pgdn
  End: ~end
  Home: ~home
  Left: ~left
  Up: ~up
  Right: ~right
  Down: ~down
  Insert: ~insert
  Delete: ~delete
  F1: ~f1
  F2: ~f2
  F3: ~f3
  F4: ~f4
  # F5: ~f5 # disables refresh with F5 if uncommented
  F6: ~f6
  F7: ~f7
  F8: ~f8
  F9: ~f9
  F10: ~f10
  F11: ~f11
  F12: ~f12

  # CTRL+<KEY>
  C-a: ~~A
  C-b: ~~B
  C-c: ~~C
  C-d: ~~D
  C-e: ~~E
  C-f: ~~F
  C-g: ~~G
  C-h: ~~H
  C-i: ~~I
  C-j: ~~J
  C-k: ~~K
  C-l: ~~L
  C-m: ~~M
  C-n: ~~N
  C-o: ~~O
  C-p: ~~P
  C-q: ~~Q
  C-r: ~~R
  C-s: ~~S
  C-t: ~~T
  C-u: ~~U
  # C-v: ~~V # disables paste if uncommented
  C-w: ~~W
  C-x: ~~X
  C-y: ~~Y
  C-z: ~~Z

  # ALT+<KEY>
  A-a: ~esc A
  A-b: ~esc B
  A-c: ~esc C
  A-d: ~esc D
  A-e: ~esc E
  A-f: ~esc F
  A-g: ~esc G
  A-h: ~esc H
  A-i: ~esc I
  A-j: ~esc J
  A-k: ~esc K
  A-l: ~esc L
  A-m: ~esc M
  A-n: ~esc N
  A-o: ~esc O
  A-p: ~esc P
  A-q: ~esc Q
  A-r: ~esc R
  A-s: ~esc S
  A-t: ~esc T
  A-u: ~esc U
  A-v: ~esc V
  A-w: ~esc W
  A-x: ~esc X
  A-y: ~esc Y
  A-z: ~esc Z

